/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as R404Import } from './routes/$404'
import { Route as IndexImport } from './routes/index'
import { Route as ManageIndexImport } from './routes/manage/index'
import { Route as FavorisIndexImport } from './routes/favoris/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AccountIndexImport } from './routes/account/index'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'

// Create/Update Routes

const R404Route = R404Import.update({
  id: '/$404',
  path: '/$404',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManageIndexRoute = ManageIndexImport.update({
  id: '/manage/',
  path: '/manage/',
  getParentRoute: () => rootRoute,
} as any)

const FavorisIndexRoute = FavorisIndexImport.update({
  id: '/favoris/',
  path: '/favoris/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$404': {
      id: '/$404'
      path: '/$404'
      fullPath: '/$404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/favoris/': {
      id: '/favoris/'
      path: '/favoris'
      fullPath: '/favoris'
      preLoaderRoute: typeof FavorisIndexImport
      parentRoute: typeof rootRoute
    }
    '/manage/': {
      id: '/manage/'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$404': typeof R404Route
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/account': typeof AccountIndexRoute
  '/app': typeof AppIndexRoute
  '/favoris': typeof FavorisIndexRoute
  '/manage': typeof ManageIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$404': typeof R404Route
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/account': typeof AccountIndexRoute
  '/app': typeof AppIndexRoute
  '/favoris': typeof FavorisIndexRoute
  '/manage': typeof ManageIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$404': typeof R404Route
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/account/': typeof AccountIndexRoute
  '/app/': typeof AppIndexRoute
  '/favoris/': typeof FavorisIndexRoute
  '/manage/': typeof ManageIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$404'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/account'
    | '/app'
    | '/favoris'
    | '/manage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$404'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/account'
    | '/app'
    | '/favoris'
    | '/manage'
  id:
    | '__root__'
    | '/'
    | '/$404'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/account/'
    | '/app/'
    | '/favoris/'
    | '/manage/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AccountIndexRoute: typeof AccountIndexRoute
  AppIndexRoute: typeof AppIndexRoute
  FavorisIndexRoute: typeof FavorisIndexRoute
  ManageIndexRoute: typeof ManageIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AccountIndexRoute: AccountIndexRoute,
  AppIndexRoute: AppIndexRoute,
  FavorisIndexRoute: FavorisIndexRoute,
  ManageIndexRoute: ManageIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$404",
        "/auth/forgot-password",
        "/auth/login",
        "/auth/register",
        "/account/",
        "/app/",
        "/favoris/",
        "/manage/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$404": {
      "filePath": "$404.tsx"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/account/": {
      "filePath": "account/index.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx"
    },
    "/favoris/": {
      "filePath": "favoris/index.tsx"
    },
    "/manage/": {
      "filePath": "manage/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
